{"version":3,"sources":["components/ReadOnlyRow.js","components/EditableRow.js","App.js","reportWebVitals.js","index.js"],"names":["ReadOnlyRow","contact","handleEditClick","handleDeleteClick","fullName","address","phoneNumber","email","type","onClick","event","id","EditableRow","editFormData","handleEditFormChange","handleCancelClick","required","placeholder","name","value","onChange","App","useState","data","contacts","setContacts","addFormData","setAddFormData","setEditFormData","editContactId","setEditContactId","handleAddFormChange","preventDefault","fieldName","target","getAttribute","fieldValue","newFormData","formValues","contactId","newContacts","index","findIndex","splice","className","onSubmit","editedContact","map","newContact","nanoid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29bcbb7f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst ReadOnlyRow = ({ contact, handleEditClick, handleDeleteClick }) => {\r\n  return (\r\n    <tr>\r\n      <td>{contact.fullName}</td>\r\n      <td>{contact.address}</td>\r\n      <td>{contact.phoneNumber}</td>\r\n      <td>{contact.email}</td>\r\n      <td>\r\n\r\n        <button\r\n          type=\"button\" onClick={(event) => handleEditClick(event, contact)}>\r\n          Edit\r\n        </button>\r\n\r\n        <button type=\"button\" onClick={() => handleDeleteClick(contact.id)}>\r\n          Delete\r\n        </button>\r\n\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default ReadOnlyRow;","import React from \"react\";\r\n\r\nconst EditableRow = ({\r\n  editFormData,\r\n  handleEditFormChange,\r\n  handleCancelClick,\r\n}) => {\r\n  return (\r\n    <tr>\r\n      <td>\r\n        <input\r\n          type=\"text\"\r\n          required=\"required\"\r\n          placeholder=\"Enter a name...\"\r\n          name=\"fullName\"\r\n          value={editFormData.fullName}\r\n          onChange={handleEditFormChange}\r\n        ></input>\r\n      </td>\r\n      <td>\r\n        <input\r\n          type=\"text\"\r\n          required=\"required\"\r\n          placeholder=\"Enter an address...\"\r\n          name=\"address\"\r\n          value={editFormData.address}\r\n          onChange={handleEditFormChange}\r\n        ></input>\r\n      </td>\r\n      <td>\r\n        <input\r\n          type=\"text\"\r\n          required=\"required\"\r\n          placeholder=\"Enter a phone number...\"\r\n          name=\"phoneNumber\"\r\n          value={editFormData.phoneNumber}\r\n          onChange={handleEditFormChange}\r\n        ></input>\r\n      </td>\r\n      <td>\r\n        <input\r\n          type=\"email\"\r\n          required=\"required\"\r\n          placeholder=\"Enter an email...\"\r\n          name=\"email\"\r\n          value={editFormData.email}\r\n          onChange={handleEditFormChange}\r\n        ></input>\r\n      </td>\r\n      <td>\r\n        <button type=\"submit\">Save</button>\r\n        <button type=\"button\" onClick={handleCancelClick}>\r\n          Cancel\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default EditableRow;","import React, { useState, Fragment } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport \"./App.css\";\nimport data from \"./mock-data.json\";\nimport ReadOnlyRow from \"./components/ReadOnlyRow\";\nimport EditableRow from \"./components/EditableRow\";\n\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\nconst App = () => {\n  const [contacts, setContacts] = useState(data);\n  const [addFormData, setAddFormData] = useState({\n    fullName: \"\",\n    address: \"\",\n    phoneNumber: \"\",\n    email: \"\",\n  });\n\n  const [editFormData, setEditFormData] = useState({\n    fullName: \"\",\n    address: \"\",\n    phoneNumber: \"\",\n    email: \"\",\n  });\n\n  const [editContactId, setEditContactId] = useState(null);\n\n  const handleAddFormChange = (event) => {\n    event.preventDefault();\n\n    const fieldName = event.target.getAttribute(\"name\");\n    const fieldValue = event.target.value;\n\n    const newFormData = { ...addFormData };\n    newFormData[fieldName] = fieldValue;\n\n    setAddFormData(newFormData);\n  };\n\n  const handleEditFormChange = (event) => {\n    event.preventDefault();\n\n    const fieldName = event.target.getAttribute(\"name\");\n    const fieldValue = event.target.value;\n\n    const newFormData = { ...editFormData };\n    newFormData[fieldName] = fieldValue;\n\n    setEditFormData(newFormData);\n  };\n\n  const handleAddFormSubmit = (event) => {\n    event.preventDefault();\n\n    const newContact = {\n      id: nanoid(),\n      fullName: addFormData.fullName,\n      address: addFormData.address,\n      phoneNumber: addFormData.phoneNumber,\n      email: addFormData.email,\n    };\n\n    const newContacts = [...contacts, newContact];\n    setContacts(newContacts);\n  };\n\n  const handleEditFormSubmit = (event) => {\n    event.preventDefault();\n\n    const editedContact = {\n      id: editContactId,\n      fullName: editFormData.fullName,\n      address: editFormData.address,\n      phoneNumber: editFormData.phoneNumber,\n      email: editFormData.email,\n    };\n\n    const newContacts = [...contacts];\n\n    const index = contacts.findIndex((contact) => contact.id === editContactId);\n\n    newContacts[index] = editedContact;\n\n    setContacts(newContacts);\n    setEditContactId(null);\n  };\n\n  const handleEditClick = (event, contact) => {\n    event.preventDefault();\n    setEditContactId(contact.id);\n\n    const formValues = {\n      fullName: contact.fullName,\n      address: contact.address,\n      phoneNumber: contact.phoneNumber,\n      email: contact.email,\n    };\n\n    setEditFormData(formValues);\n  };\n\n  const handleCancelClick = () => {\n    setEditContactId(null);\n  };\n\n  const handleDeleteClick = (contactId) => {\n    const newContacts = [...contacts];\n\n    const index = contacts.findIndex((contact) => contact.id === contactId);\n\n    newContacts.splice(index, 1);\n\n    setContacts(newContacts);\n  };\n\n\n\n  return (\n    // <><>\n    //   <BrowserRouter>\n\n    //   <div className=\"App\">\n    //     <Switch>\n    //       <Route exact path=\"/\"  component={LandingPage}>\n    //       {/* <AppLayout/> */}\n    //       </Route>\n    //       <ProtectedRoute exact path=\"/app\" component={AppLayout} />\n    //       {/* <Route path=\"*\" component={() => \"404 Page Not Found\"} /> */}\n    //     </Switch>\n    //   </div>\n\n    //   </BrowserRouter>\n    // </>\n\n    // <hr/>\n\n    <div className=\"app-container\">\n    <h1>Management System</h1>\n        <form onSubmit={handleEditFormSubmit}>\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Address</th>\n                <th>Phone Number</th>\n                <th>Email</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {contacts.map((contact) => (\n                <Fragment>\n                  {editContactId === contact.id ? (\n                    <EditableRow\n                      editFormData={editFormData}\n                      handleEditFormChange={handleEditFormChange}\n                      handleCancelClick={handleCancelClick} />\n                  ) : (\n                    <ReadOnlyRow\n                      contact={contact}\n                      handleEditClick={handleEditClick}\n                      handleDeleteClick={handleDeleteClick} />\n                  )}\n                </Fragment>\n              ))}\n            </tbody>\n          </table>\n        </form>\n\n        <h2>Add a Contact</h2>\n        <form onSubmit={handleAddFormSubmit}>\n          <input\n            type=\"text\"\n            name=\"fullName\"\n            required=\"required\"\n            placeholder=\"Enter a name...\"\n            onChange={handleAddFormChange} />\n          <input\n            type=\"text\"\n            name=\"address\"\n            required=\"required\"\n            placeholder=\"Enter an address...\"\n            onChange={handleAddFormChange} />\n          <input\n            type=\"text\"\n            name=\"phoneNumber\"\n            required=\"required\"\n            placeholder=\"Enter a phone number...\"\n            onChange={handleAddFormChange} />\n          <input\n            type=\"email\"\n            name=\"email\"\n            required=\"required\"\n            placeholder=\"Enter an email...\"\n            onChange={handleAddFormChange} />\n          <button type=\"submit\">Add</button>\n\n\n        </form>\n\n      </div>\n  );\n};\n// const rootElement = document.getElementById(\"root\");\n// ReactDOM.render(<App />, rootElement);\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}